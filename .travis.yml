dist: bionic

sudo: required

env:
  global:
    - DOCKER_REPO=nsfcareer/femtech

language:
  - cpp

services:
  - docker

compiler:
  - gcc

addons:
  apt:
    packages:
      - cmake
      - libblas-dev 
      - liblapack-dev
      - openmpi-bin 
      - openmpi-common 
      - libopenmpi-dev
      - python-numpy

before_install:
  # Check versions of gcc, g++ and cmake
  - gcc -v && g++ -v && cmake --version
  # Check instruction set used during travis build
  - gcc -### -E - -march=native 2>&1 | sed -r '/cc1/!d;s/(")|(^.* - )|( -mno-[^\ ]+)//g'
  - python --version

before_script:
  # Run your build commands next
  - mkdir build
  - cd build/
  - cmake .. -DEXAMPLES=ON -DEXAMPLE9=ON -DEXAMPLE1=ON -DEXAMPLE10=ON -DEXAMPLE5=ON
  - if [ "$TRAVIS_BRANCH" = "develop" ] || [ "$TRAVIS_BRANCH" = "CI" ]; then 
      docker pull $DOCKER_REPO:production || true; 
      docker pull $DOCKER_REPO:develop || true; 
    fi

script:
  - pwd
  - make -j 4 
  # test example 9
  - cd ./examples/ex9/
  - mpirun -n 1 --mca btl_base_warn_component_unused 0 ex9 1-elt-cube.k
  - python compareResults.py
  # test example 1
  - cd ../ex1
  - mpirun -n 2 --mca btl_base_warn_component_unused 0 ex1 mixed-hex-tet.k
  # test example 10
  - cd ../ex10
  - mpirun -n 1 --mca btl_base_warn_component_unused 0 ex10 1-elt-tet.k
    # Build docker image if on develop branch
  - if [ "$TRAVIS_BRANCH" = "develop" ] || [ "$TRAVIS_BRANCH" = "CI" ]; then 
      cd ../../..;
      mkdir builddocker;
      docker build --build-arg BRANCH=$TRAVIS_BRANCH --pull --cache-from $DOCKER_REPO:develop --target buildFemTech --tag $DOCKER_REPO:develop -f Dockerfile builddocker || travis_terminate 1;
      docker run --name testFemTech -it --rm $DOCKER_REPO:develop /home/ubuntu/FemTech/build/examples/ex5/test_ex5.sh || travis_terminate 1;
      docker logs --tail;
      docker build --pull --cache-from $DOCKER_REPO:develop --cache-from $DOCKER_REPO:production --tag $DOCKER_REPO:production -f Dockerfile builddocker; 
    fi

after_script:
  - if [ "$TRAVIS_BRANCH" = "develop" ] || [ "$TRAVIS_BRANCH" = "CI" ]; then docker images; fi

before_deploy:
  - if [ "$TRAVIS_BRANCH" = "develop" ]; then docker login -u "$CONTAINER_USER" -p "$CONTAINER_PASS"; fi

deploy:
  provider: script
  script: docker push $DOCKER_REPO:production &&  docker push $DOCKER_REPO:develop
  on:
    branch: develop
